//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IPidControlRaw : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IPidControlRaw(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IPidControlRaw obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IPidControlRaw() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          yarpPINVOKE.delete_IPidControlRaw(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual bool setPidRaw(SWIGTYPE_p_PidControlTypeEnum pidtype, int j, Pid pid) {
    bool ret = yarpPINVOKE.IPidControlRaw_setPidRaw(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), j, Pid.getCPtr(pid));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool setPidsRaw(SWIGTYPE_p_PidControlTypeEnum pidtype, Pid pids) {
    bool ret = yarpPINVOKE.IPidControlRaw_setPidsRaw(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), Pid.getCPtr(pids));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool setPidReferenceRaw(SWIGTYPE_p_PidControlTypeEnum pidtype, int j, double arg2) {
    bool ret = yarpPINVOKE.IPidControlRaw_setPidReferenceRaw(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), j, arg2);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool setPidReferencesRaw(SWIGTYPE_p_PidControlTypeEnum pidtype, SWIGTYPE_p_double refs) {
    bool ret = yarpPINVOKE.IPidControlRaw_setPidReferencesRaw(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), SWIGTYPE_p_double.getCPtr(refs));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool setPidErrorLimitRaw(SWIGTYPE_p_PidControlTypeEnum pidtype, int j, double limit) {
    bool ret = yarpPINVOKE.IPidControlRaw_setPidErrorLimitRaw(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), j, limit);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool setPidErrorLimitsRaw(SWIGTYPE_p_PidControlTypeEnum pidtype, SWIGTYPE_p_double limits) {
    bool ret = yarpPINVOKE.IPidControlRaw_setPidErrorLimitsRaw(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), SWIGTYPE_p_double.getCPtr(limits));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getPidErrorRaw(SWIGTYPE_p_PidControlTypeEnum pidtype, int j, SWIGTYPE_p_double err) {
    bool ret = yarpPINVOKE.IPidControlRaw_getPidErrorRaw(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), j, SWIGTYPE_p_double.getCPtr(err));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getPidErrorsRaw(SWIGTYPE_p_PidControlTypeEnum pidtype, SWIGTYPE_p_double errs) {
    bool ret = yarpPINVOKE.IPidControlRaw_getPidErrorsRaw(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), SWIGTYPE_p_double.getCPtr(errs));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getPidOutputRaw(SWIGTYPE_p_PidControlTypeEnum pidtype, int j, SWIGTYPE_p_double arg2) {
    bool ret = yarpPINVOKE.IPidControlRaw_getPidOutputRaw(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), j, SWIGTYPE_p_double.getCPtr(arg2));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getPidOutputsRaw(SWIGTYPE_p_PidControlTypeEnum pidtype, SWIGTYPE_p_double outs) {
    bool ret = yarpPINVOKE.IPidControlRaw_getPidOutputsRaw(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), SWIGTYPE_p_double.getCPtr(outs));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getPidRaw(SWIGTYPE_p_PidControlTypeEnum pidtype, int j, Pid pid) {
    bool ret = yarpPINVOKE.IPidControlRaw_getPidRaw(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), j, Pid.getCPtr(pid));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getPidsRaw(SWIGTYPE_p_PidControlTypeEnum pidtype, Pid pids) {
    bool ret = yarpPINVOKE.IPidControlRaw_getPidsRaw(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), Pid.getCPtr(pids));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getPidReferenceRaw(SWIGTYPE_p_PidControlTypeEnum pidtype, int j, SWIGTYPE_p_double arg2) {
    bool ret = yarpPINVOKE.IPidControlRaw_getPidReferenceRaw(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), j, SWIGTYPE_p_double.getCPtr(arg2));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getPidReferencesRaw(SWIGTYPE_p_PidControlTypeEnum pidtype, SWIGTYPE_p_double refs) {
    bool ret = yarpPINVOKE.IPidControlRaw_getPidReferencesRaw(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), SWIGTYPE_p_double.getCPtr(refs));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getPidErrorLimitRaw(SWIGTYPE_p_PidControlTypeEnum pidtype, int j, SWIGTYPE_p_double limit) {
    bool ret = yarpPINVOKE.IPidControlRaw_getPidErrorLimitRaw(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), j, SWIGTYPE_p_double.getCPtr(limit));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getPidErrorLimitsRaw(SWIGTYPE_p_PidControlTypeEnum pidtype, SWIGTYPE_p_double limits) {
    bool ret = yarpPINVOKE.IPidControlRaw_getPidErrorLimitsRaw(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), SWIGTYPE_p_double.getCPtr(limits));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool resetPidRaw(SWIGTYPE_p_PidControlTypeEnum pidtype, int j) {
    bool ret = yarpPINVOKE.IPidControlRaw_resetPidRaw(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), j);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool disablePidRaw(SWIGTYPE_p_PidControlTypeEnum pidtype, int j) {
    bool ret = yarpPINVOKE.IPidControlRaw_disablePidRaw(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), j);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool enablePidRaw(SWIGTYPE_p_PidControlTypeEnum pidtype, int j) {
    bool ret = yarpPINVOKE.IPidControlRaw_enablePidRaw(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), j);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool setPidOffsetRaw(SWIGTYPE_p_PidControlTypeEnum pidtype, int j, double v) {
    bool ret = yarpPINVOKE.IPidControlRaw_setPidOffsetRaw(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), j, v);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool isPidEnabledRaw(SWIGTYPE_p_PidControlTypeEnum pidtype, int j, SWIGTYPE_p_bool enabled) {
    bool ret = yarpPINVOKE.IPidControlRaw_isPidEnabledRaw(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), j, SWIGTYPE_p_bool.getCPtr(enabled));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
