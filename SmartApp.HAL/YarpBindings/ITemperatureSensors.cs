//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ITemperatureSensors : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ITemperatureSensors(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ITemperatureSensors obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ITemperatureSensors() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          yarpPINVOKE.delete_ITemperatureSensors(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual uint getNrOfTemperatureSensors() {
    uint ret = yarpPINVOKE.ITemperatureSensors_getNrOfTemperatureSensors(swigCPtr);
    return ret;
  }

  public virtual MAS_status getTemperatureSensorStatus(uint sens_index) {
    MAS_status ret = (MAS_status)yarpPINVOKE.ITemperatureSensors_getTemperatureSensorStatus(swigCPtr, sens_index);
    return ret;
  }

  public virtual bool getTemperatureSensorName(uint sens_index, SWIGTYPE_p_std__string name) {
    bool ret = yarpPINVOKE.ITemperatureSensors_getTemperatureSensorName(swigCPtr, sens_index, SWIGTYPE_p_std__string.getCPtr(name));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getTemperatureSensorFrameName(uint sens_index, SWIGTYPE_p_std__string frameName) {
    bool ret = yarpPINVOKE.ITemperatureSensors_getTemperatureSensorFrameName(swigCPtr, sens_index, SWIGTYPE_p_std__string.getCPtr(frameName));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getTemperatureSensorMeasure(uint sens_index, SWIGTYPE_p_double arg1, SWIGTYPE_p_double timestamp) {
    bool ret = yarpPINVOKE.ITemperatureSensors_getTemperatureSensorMeasure__SWIG_0(swigCPtr, sens_index, SWIGTYPE_p_double.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(timestamp));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getTemperatureSensorMeasure(uint sens_index, Vector arg1, SWIGTYPE_p_double timestamp) {
    bool ret = yarpPINVOKE.ITemperatureSensors_getTemperatureSensorMeasure__SWIG_1(swigCPtr, sens_index, Vector.getCPtr(arg1), SWIGTYPE_p_double.getCPtr(timestamp));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
