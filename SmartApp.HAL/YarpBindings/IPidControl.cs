//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IPidControl : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IPidControl(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IPidControl obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IPidControl() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          yarpPINVOKE.delete_IPidControl(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual bool setPid(SWIGTYPE_p_PidControlTypeEnum pidtype, int j, Pid pid) {
    bool ret = yarpPINVOKE.IPidControl_setPid(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), j, Pid.getCPtr(pid));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool setPids(SWIGTYPE_p_PidControlTypeEnum pidtype, Pid pids) {
    bool ret = yarpPINVOKE.IPidControl_setPids(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), Pid.getCPtr(pids));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool setPidReference(SWIGTYPE_p_PidControlTypeEnum pidtype, int j, double arg2) {
    bool ret = yarpPINVOKE.IPidControl_setPidReference(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), j, arg2);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool setPidReferences(SWIGTYPE_p_PidControlTypeEnum pidtype, SWIGTYPE_p_double refs) {
    bool ret = yarpPINVOKE.IPidControl_setPidReferences(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), SWIGTYPE_p_double.getCPtr(refs));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool setPidErrorLimit(SWIGTYPE_p_PidControlTypeEnum pidtype, int j, double limit) {
    bool ret = yarpPINVOKE.IPidControl_setPidErrorLimit(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), j, limit);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool setPidErrorLimits(SWIGTYPE_p_PidControlTypeEnum pidtype, SWIGTYPE_p_double limits) {
    bool ret = yarpPINVOKE.IPidControl_setPidErrorLimits(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), SWIGTYPE_p_double.getCPtr(limits));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getPidError(SWIGTYPE_p_PidControlTypeEnum pidtype, int j, SWIGTYPE_p_double err) {
    bool ret = yarpPINVOKE.IPidControl_getPidError(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), j, SWIGTYPE_p_double.getCPtr(err));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getPidErrors(SWIGTYPE_p_PidControlTypeEnum pidtype, SWIGTYPE_p_double errs) {
    bool ret = yarpPINVOKE.IPidControl_getPidErrors(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), SWIGTYPE_p_double.getCPtr(errs));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getPidOutput(SWIGTYPE_p_PidControlTypeEnum pidtype, int j, SWIGTYPE_p_double arg2) {
    bool ret = yarpPINVOKE.IPidControl_getPidOutput(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), j, SWIGTYPE_p_double.getCPtr(arg2));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getPidOutputs(SWIGTYPE_p_PidControlTypeEnum pidtype, SWIGTYPE_p_double outs) {
    bool ret = yarpPINVOKE.IPidControl_getPidOutputs(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), SWIGTYPE_p_double.getCPtr(outs));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getPid(SWIGTYPE_p_PidControlTypeEnum pidtype, int j, Pid pid) {
    bool ret = yarpPINVOKE.IPidControl_getPid(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), j, Pid.getCPtr(pid));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getPids(SWIGTYPE_p_PidControlTypeEnum pidtype, Pid pids) {
    bool ret = yarpPINVOKE.IPidControl_getPids(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), Pid.getCPtr(pids));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getPidReference(SWIGTYPE_p_PidControlTypeEnum pidtype, int j, SWIGTYPE_p_double arg2) {
    bool ret = yarpPINVOKE.IPidControl_getPidReference(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), j, SWIGTYPE_p_double.getCPtr(arg2));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getPidReferences(SWIGTYPE_p_PidControlTypeEnum pidtype, SWIGTYPE_p_double refs) {
    bool ret = yarpPINVOKE.IPidControl_getPidReferences(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), SWIGTYPE_p_double.getCPtr(refs));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getPidErrorLimit(SWIGTYPE_p_PidControlTypeEnum pidtype, int j, SWIGTYPE_p_double limit) {
    bool ret = yarpPINVOKE.IPidControl_getPidErrorLimit(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), j, SWIGTYPE_p_double.getCPtr(limit));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getPidErrorLimits(SWIGTYPE_p_PidControlTypeEnum pidtype, SWIGTYPE_p_double limits) {
    bool ret = yarpPINVOKE.IPidControl_getPidErrorLimits(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), SWIGTYPE_p_double.getCPtr(limits));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool resetPid(SWIGTYPE_p_PidControlTypeEnum pidtype, int j) {
    bool ret = yarpPINVOKE.IPidControl_resetPid(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), j);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool disablePid(SWIGTYPE_p_PidControlTypeEnum pidtype, int j) {
    bool ret = yarpPINVOKE.IPidControl_disablePid(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), j);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool enablePid(SWIGTYPE_p_PidControlTypeEnum pidtype, int j) {
    bool ret = yarpPINVOKE.IPidControl_enablePid(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), j);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool setPidOffset(SWIGTYPE_p_PidControlTypeEnum pidtype, int j, double v) {
    bool ret = yarpPINVOKE.IPidControl_setPidOffset(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), j, v);
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool isPidEnabled(SWIGTYPE_p_PidControlTypeEnum pidtype, int j, SWIGTYPE_p_bool enabled) {
    bool ret = yarpPINVOKE.IPidControl_isPidEnabled(swigCPtr, SWIGTYPE_p_PidControlTypeEnum.getCPtr(pidtype), j, SWIGTYPE_p_bool.getCPtr(enabled));
    if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
