
# Interfaccia da utilizzare per creare le classe che verranno utilizzate dal
# controller.

class abstract():

    def __init__(self):
        """
            Initialization of class for all object usefull for computation
        """
        return

    def analyze_face(self, frame, toIdentify = True):
        """
            Function that can be called for controller to execute detection of
            sentiment and identification of person.

            Params:
                frame (numpy.ndarray): matrix-like of image.
                toIdentify (bool): var that say if the worker must compute the
                    identification of person in the image or is useless beacose
                    the controller already know the identity. Value:
                        - True: must be identify
                        - False: you can avoid identifying

            Return:
                result (dict): json fact in KB-format
                descriptor (obj): internal descriptor of module
        """
        pass

    def is_available(self):
        """
            Check module availability.

            For offline_module can be always True.

            Params:

            Return:
                result (bool): if module is available
                    - True: if is possible use the module
                    - False: otherwise
        """
        pass

    def set_detect_attibutes(self, *args, **kwargs):
        """
            Set the parameters that must be detected in a worker for future
            frame.

            Params:
                For interface must be any type of parameters in the implementation
                can be checked in the specific case of module.

            Return:
                result (dict): json of parameters that are accepted form module
                 and so attribute that will be detected
        """
        pass


    def get_descriptor(frame):
        """
            Compute the descriptor for the frame.

            Params:
                frame (numpy.ndarray): matrix-like of image.

            Return:
                descriptor (obj): internal descriptor of module
        """
        pass

    def get_match(db, descriptor, descriptor_postion, id_postion):
        """
            Search the mach of descriptor in the tuple at right position
            (descriptor_postion) and return the id associated in id_postion.

            Params:
                db (list(tuple)): list of tuple containing descriptor and id
                    that will be checked, in the right position
                descriptor (object): descriptor that will be mach
                descriptor_postion (int): index of the descriptor in a tuple
                id_postion (int): index of the id in a tuple

            Return:
                result (object): result of maching value of id position

        """
        pass
